//Hello World, Introducing Strings! (Part 4 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          Console.WriteLine("Hello David");
          string firstfriend="John";
          string secondfriend="Scott";
          Console.WriteLine($"Hello {firstfriend} and {secondfriend}");
          
        }

        
    }
}
*/

--------------------------------------------------------------------------------------------------------------------------------------------
//The Basics of Strings! (Part 5 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          Console.WriteLine("Hello David");
          string firstfriend="   John  ";
          string secondfriend="  Scott  ";
         //trimming the space  
          firstfriend=firstfriend.Trim();
          //you can also trim like this
          Console.WriteLine($"Hello {firstfriend} and {secondfriend.Trim()}");
          
          
        }

        
    }
}
*/

--------------------------------------------------------------------------------------------------------------------------------------------
//Searching Strings (Part 6 of 19) | C# for Beginners
/*
//we have other functions to search through string like
//.Contain()
//we also have .ToUpper() and .ToLower()


*/
---------------------------------------------------------------------------------------------------------------------------------------------


//Numbers, Integers, and Math (Part 7 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          // int can only store 32 bits
          /*
          because the number is too large the output will show error
          int a=100000000000000000;
          
          
          Another error can be you have stored two large numbers
          but let's say you perform an addition operation or mulitplication 
          it will return a random number indicating the result of the operation
          is out of range
          
          
          */
          
         /*int a=100000000000000000;
          int b=12;
         int c=6;
         */
         /*
         int a=1000000000;
         int b=1000000000;
         int c=1000000000;
         int sum=a+b+c;
         Console.WriteLine(sum);*/
         
         
         /* runnig the code above we have an output of
         -1294967296
         when normally it's meant to be 3000000000
         this is because where the result of the operation is being stored is of 
         type int
         
         a way to solve it is you can use another type "long"
         they are ways to covert the code above
         
         1.
          long a=1000000000;
          long b=1000000000;
          long c=1000000000;
          long sum=a+b+c;
          Console.WriteLine(sum);
         */
         //2.
         //you can alos add this function checked()which checks if the number results in an overflow
         int a=1000000000;
         int b=1000000000;
         int c=1000000000;
         int d=1000000000;
         int e=2000000000;
         long sum=(long)a+(long)b+(long)c;
         long sum2=checked(d+e);
         Console.WriteLine(sum);
         //the line of code below should give an error that the code resulted in an overflow
      
         Console.WriteLine(sum2);
 
          
        }

        
    }
}

*/

--------------------------------------------------------------------------------------------------------------------------------------------
//Numbers, Precision, Casting, Doubles, and More (Part 8 of 19) | C# for Beginners
/*
/*
we have other type of int that can store huge numbers
bigint.
*/
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          /*
           int a=10.2;
           int b=12.8;
           // the error "convert type `double' to `int'"
          
            int a=(int)10.2;
            int b=(int)12.8;
            int c=a+b;
             Console.WriteLine(c);
          */
          
         /*
          double e=10.6;//natural type
          // if you run this code the line below will give an error
          //because you did not explicitly state it was a float by adding f to the codd
          float t=12.4;
          //modified version
          //float t=12.4f;
          double f=e+t;
          Console.WriteLine(f);
          */
          
          /*
          decimal d=12.3M;
          decimal g=10.7M;
          decimal h=d+g;
          Console.WriteLine($"{h}");
          */
          
        }

        
    }
}
*/
--------------------------------------------------------------------------------------------------------------------------------------------
//Branching, Ifs, and Conditional Logic (Part 9 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
        int a=6;
        int b=10;
        int c=a+b;
        // A data type that stores only true or false
        bool myTest=c>10;
        /*
        if(myTest)
          {
            Console.WriteLine("it is greater than 10");   
          }
        //otherwise
        else
          {
            Console.WriteLine("it is less than 10");
          }
          */
        //we modify the if statment by adding these operators'&&' '||'
        if((a+b>10) &&(a==b))
        //only works if both conditions are true
          {
             Console.WriteLine("it is greater than 10");
              Console.WriteLine("a is the same as b");
          }
        if((a+b>10) || (a==b))//only works if one is true
          {
             Console.WriteLine("a is the same as b or a+b>10");
          }
        else{
          Console.WriteLine("nothing");
        }

        
        }
    }    
}

*/
--------------------------------------------------------------------------------------------------------------------------------------------

//Branching, While loops (Part 10 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
        int counter=0;
          Console.WriteLine("While loop");
          while(counter<5)
              {
               Console.WriteLine(counter);
               counter++;
              }
          //The above code will print 0,1,2 3,4
          //another way of printing and even omitting the '0'
          //assuming counter=0
          counter=0;//retuning counter back to 0
          Console.WriteLine("\n");//to start printing on another line
          Console.WriteLine("do-While loop");
          do
              {
              counter++;
              Console.WriteLine(counter);
              }
          while(counter<5);
        
        }
    }    
}


*/
--------------------------------------------------------------------------------------------------------------------------------------------
//For Loops (Part 11 of 19) | C# for Beginners
/*
using System;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          for(int rows=1;rows<11;rows++)
              {
                for(char column='a';column<'k';column++)  
                  {
                    Console.WriteLine($"row {rows} column {column}");
                  }
              }
        
        }
    }    
}

*/
--------------------------------------------------------------------------------------------------------------------------------------------
List<T> and Collections of Data (Part 12 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var names=new List<string>{"Scott","Anna","David"};
          names.Add("Luke");
          names.Add("JOhn");
          names.Remove("David");
          foreach(var name in names)
            {
              Console.WriteLine($"\n{name.ToUpper()}");
            }
    }    
}
}

*/


--------------------------------------------------------------------------------------------------------------------------------------------
//Arrays, Lists, Indexing, and Foreach (Part 13 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var names=new List<string>{"Scott","Anna","David"};
         
          names.Add("Luke");
          names.Add("JOhn");
          names.Add("Paul");
          names.Add("Jake");
          names.Add("Russ");
        
          
          foreach(var name in names)
            {
              Console.WriteLine($"\n{name.ToUpper()}");
            }
          
    }    
}
}


*/
--------------------------------------------------------------------------------------------------------------------------------------------
//Sorting and Searching Lists (Part 14 of 19) | C# for Beginners
/*using System;
using System. Collections.Generic;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var names=new List<string>{"Scott","Anna","David"};
          names.Add("Luke");
          names.Add("JOhn");
          names.Add("Paul");
          names.Add("Jake");
          names.Add("Russ");
        
          
          foreach(var name in names[2..4])
            {
              Console.WriteLine($"\n{name.ToUpper()}");
            }
          
    }    
}
}
*/
--------------------------------------------------------------------------------------------------------------------------------------------
//Language Integrated Query (LINQ) and IEnumerable (Part 15 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;
using System.Linq;
namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var numbers=new List<int>{70,59,81,28,99,87};
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
          numbers.Sort();
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
         
         //List<int> scores=[87,98,80,100];
          List<int> scores = new List<int> { 87, 98, 80, 100 };

         IEnumerable<int> scorequery=
           from score in scores
           where score>80
           select score;
           
         foreach(int i in scorequery)
         {
           Console.WriteLine(i+" ");
         }
    }    
}
}

*/
-------------------------------------------------------------------------------------------------------------------------------------------
//LINQ Query Expressions From, Where, Orderby, and Select (Part 16 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;
using System.Linq;
namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var numbers=new List<int>{70,59,81,28,99,87};
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
          numbers.Sort();
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
         
         //List<int> scores=[87,98,80,100];
          List<int> scores = new List<int> {  98, 87, 80, 100 };

         IEnumerable<string> scorequery=
           from score in scores
           where score>80
           orderby score descending
           select $"{score}";
           
         foreach(string i in scorequery)
         {
           Console.WriteLine(i);
         }
    }    
}
}
*/
-------------------------------------------------------------------------------------------------------------------------------------------
//LINQ Method Syntax vs Query (Part 17 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;
using System.Linq;
namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var numbers=new List<int>{70,59,81,28,99,87};
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
          numbers.Sort();
          Console.WriteLine($"I found 70 at index{numbers.IndexOf(70)}");
         
         //List<int> scores=[87,98,80,100];
          List<int> scores = new List<int> {  98, 87, 80, 100 };

         /*IEnumerable<string> scorequery=
           from score in scores
           where score>80
           orderby score descending
           select $"{score}";
          */
          var sc=scores.Where(s=>s>80).OrderByDescending(s=>s);
          List<int> myscore=sc.ToList();
         foreach(var score in sc)
         {
           Console.WriteLine(score);
         }
    }    
}
}

*/
-------------------------------------------------------------------------------------------------------------------------------------------
//Object-oriented Programming (OOP) (Part 18 of 19) | C# for Beginners
/*
using System;
using System. Collections.Generic;
using System.Linq;
namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
          var p1=new Person("John","Mark",new DateOnly(1970,1,1));
          var p2=new Person("Toney","Mark",new DateOnly(1970,1,1));
          List<Person>people={p1};
          Console.WriteLine(people.count);
        }
    }
    /*
    public class person
    {
      public person(string Firstname,string Lastname,DateOnly bd)
      {
        firstname=Firstname;
        lastname=Lastname;
        birth=bd;
      }
      private string firstname;
      private string lastname;
      private DateOnly birth;
    }
    */
    public class Person(string firstname,string lastname,DateOnly birthday) 
    {
      public string First {get;}=firstname;
      public string Last {get;}=lastname;
      public DateOnly bd{get;}=birthday;
    }
}


*/
-------------------------------------------------------------------------------------------------------------------------------------------
//OOP with derived or abstract classes, overrides | IEnumerable (Part 19 of 19) | C# for Beginners
/*
using System;
using System.Collections;
using System.Collections.Generic;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var student1 = new Student("John", "Mark", new DateOnly(2005, 5, 1), "Mathematics");
            var teacher1 = new Teacher("Toney", "Mark", new DateOnly(1980, 3, 15), "History");

            School school = new School();
            school.AddPerson(student1);
            school.AddPerson(teacher1);

            foreach (var person in school)
            {
                Console.WriteLine(person.GetDetails());
            }
        }
    }

    // Abstract base class
    public abstract class Person
    {
        public string FirstName { get; }
        public string LastName { get; }
        public DateOnly BirthDate { get; }

        public Person(string first, string last, DateOnly dob)
        {
            FirstName = first;
            LastName = last;
            BirthDate = dob;
        }

        // Abstract method to override in derived classes
        public abstract string GetDetails();
    }

    // Derived class - Student
    public class Student : Person
    {
        public string Major { get; }

        public Student(string first, string last, DateOnly dob, string major)
            : base(first, last, dob)
        {
            Major = major;
        }

        public override string GetDetails()
        {
            return $"Student: {FirstName} {LastName}, Major: {Major}";
        }
    }

    // Derived class - Teacher
    public class Teacher : Person
    {
        public string Subject { get; }

        public Teacher(string first, string last, DateOnly dob, string subject)
            : base(first, last, dob)
        {
            Subject = subject;
        }

        public override string GetDetails()
        {
            return $"Teacher: {FirstName} {LastName}, Teaches: {Subject}";
        }
    }

    // Custom collection implementing IEnumerable
    public class School : IEnumerable<Person>
    {
        private List<Person> people = new List<Person>();

        public void AddPerson(Person person)
        {
            people.Add(person);
        }

        public IEnumerator<Person> GetEnumerator()
        {
            return people.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}

*/
-------------------------------------------------------------------------------------------------------------------------------------------
